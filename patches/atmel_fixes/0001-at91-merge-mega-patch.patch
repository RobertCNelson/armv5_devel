From 245352c9f9d6c47d59e67cf9694562cf5d06b586 Mon Sep 17 00:00:00 2001
From: Robert Nelson <robertcnelson@gmail.com>
Date: Mon, 13 May 2013 16:14:48 -0500
Subject: [PATCH] at91: merge mega patch

Signed-off-by: Robert Nelson <robertcnelson@gmail.com>
---
 arch/arm/boot/dts/Makefile          |    1 +
 arch/arm/boot/dts/at91-ariag25.dts  |    4 +
 arch/arm/boot/dts/at91-foxg20.dts   |  221 +++++++++++++++++++++++++++++++++++
 arch/arm/boot/dts/at91sam9g25ek.dts |    4 +
 arch/arm/boot/dts/at91sam9x5.dtsi   |    7 ++
 arch/arm/mach-at91/at91sam9x5.c     |    5 +
 drivers/mmc/host/atmel-mci.c        |    1 +
 drivers/mmc/host/of_mmc_spi.c       |   28 +++--
 drivers/rtc/rtc-at91sam9.c          |   15 +++
 drivers/tty/serial/atmel_serial.c   |   19 ++-
 10 files changed, 295 insertions(+), 10 deletions(-)
 create mode 100644 arch/arm/boot/dts/at91-foxg20.dts

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index b9f7121..00e9d02 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -18,6 +18,7 @@ dtb-$(CONFIG_ARCH_AT91) += usb_a9263.dtb
 # sam9g20
 dtb-$(CONFIG_ARCH_AT91) += at91sam9g20ek.dtb
 dtb-$(CONFIG_ARCH_AT91) += at91sam9g20ek_2mmc.dtb
+dtb-$(CONFIG_ARCH_AT91) += at91-foxg20.dtb
 dtb-$(CONFIG_ARCH_AT91) += kizbox.dtb
 dtb-$(CONFIG_ARCH_AT91) += tny_a9g20.dtb
 dtb-$(CONFIG_ARCH_AT91) += usb_a9g20.dtb
diff --git a/arch/arm/boot/dts/at91-ariag25.dts b/arch/arm/boot/dts/at91-ariag25.dts
index c7aebba..d5f674f 100644
--- a/arch/arm/boot/dts/at91-ariag25.dts
+++ b/arch/arm/boot/dts/at91-ariag25.dts
@@ -162,6 +162,10 @@
 
 	};
 
+	rtc@fffffeb0 {
+		status = "okay";
+	};
+
 	onewire@0 {
 		compatible = "w1-gpio";
 		gpios = <&pioA 21 1>;
diff --git a/arch/arm/boot/dts/at91-foxg20.dts b/arch/arm/boot/dts/at91-foxg20.dts
new file mode 100644
index 0000000..7b96492
--- /dev/null
+++ b/arch/arm/boot/dts/at91-foxg20.dts
@@ -0,0 +1,221 @@
+/*
+ * at91-foxg20.dts - Device Tree file for Acme Systems FoxG20 board
+ *
+ * Based on DT files for at91sam9g20ek evaluation board (AT91SAM9G20 SoC)
+ *
+ * Compile with dtc in <kernel_src/arch/arm/boot/dts> folder:
+ *  'dtc -O dtb -o at91-foxg20.dtb at91-foxg20.dts'           [dpg 20130404]
+ */
+
+/dts-v1/;
+/include/ "at91sam9g20.dtsi"
+
+/ {
+
+	model = "Acme Systems FoxG20";
+        compatible = "acme,foxg20", "atmel,at91sam9g20", "atmel,at91sam9";
+
+	chosen {
+		/* bootargs = "mem=64M console=ttyS0,115200 noinitrd root=/dev/mmcblk0p2 rw rootwait init=/sbin/init"; */
+		bootargs = "mem=64M console=ttyS0,115200 noinitrd root=/dev/mmcblk0p2 rw rootwait";
+	};
+
+	memory {
+		reg = <0x20000000 0x4000000>;
+	};
+
+	clocks {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		ranges;
+
+		main_clock: clock@0 {
+			compatible = "atmel,osc", "fixed-clock";
+			clock-frequency = <18432000>;
+		};
+	};
+
+	ahb {
+		apb {
+			pinctrl@fffff400 {
+				board {
+					pinctrl_pck0_as_mck: pck0_as_mck {
+						atmel,pins =
+							<2 1 0x2 0x0>;	/* PC1 periph B */
+					};
+
+				};
+
+				mmc0_slot1 {
+					pinctrl_board_mmc0_slot1: mmc0_slot1-board {
+						atmel,pins =
+							<2 9 0x0 0x5>;	/* PC9 gpio CD pin pull up and deglitch */
+					};
+				};
+
+                                i2c0 {
+                                        pinctrl_i2c0: i2c0-0 {
+                                                atmel,pins =
+                                                        <0 23 0x1 0x2    /* TWD (SDA) PA23 periph A, open drain */
+                                                         0 24 0x1 0x2>;  /* TWCK (SCL) PA24 periph A, open drain */
+                                        };
+				};
+			};
+
+			dbgu: serial@fffff200 {
+				status = "okay";
+			};
+
+			usart0: serial@fffb0000 {
+				pinctrl-0 =
+					<&pinctrl_usart0
+					 &pinctrl_usart0_rts
+					 &pinctrl_usart0_cts
+					 /* &pinctrl_usart0_dtr_dsr */
+					 /* &pinctrl_usart0_dcd */
+					 /* &pinctrl_usart0_ri */
+					>;
+				status = "okay";
+			};
+
+			usart1: serial@fffb4000 {
+				status = "okay";
+			};
+
+			usart2: serial@fffb8000 {
+				status = "okay";
+			};
+
+			usart3: serial@fffd0000 {
+				status = "okay";
+			};
+
+			uart0: serial@fffd4000 {
+				status = "okay";
+			};
+
+			uart1: serial@fffd8000 {
+				status = "okay";
+			};
+
+			macb0: ethernet@fffc4000 {
+				phy-mode = "rmii";
+				status = "okay";
+			};
+
+			usb1: gadget@fffa4000 {
+				atmel,vbus-gpio = <&pioC 6 0>;
+				status = "okay";
+			};
+
+			mmc0: mmc@fffa8000 {
+				pinctrl-0 = <
+					/* &pinctrl_board_mmc0_slot1 */
+					&pinctrl_mmc0_clk
+					&pinctrl_mmc0_slot1_cmd_dat0
+					&pinctrl_mmc0_slot1_dat1_3>;
+				status = "okay";
+				slot@1 {
+					reg = <1>;
+					bus-width = <4>;
+					/* cd-gpios = <&pioC 9 0>; */
+				};
+			};
+
+			ssc0: ssc@fffbc000 {
+				/* status = "okay"; */
+				pinctrl-0 = <&pinctrl_ssc0_tx>;
+			};
+
+			spi0: spi@fffc8000 {
+				/* status = "okay"; */
+				cs-gpios = <0>, <&pioC 11 0>, <0>, <0>;
+				mtd_dataflash@0 {
+					compatible = "atmel,at45", "atmel,dataflash";
+					spi-max-frequency = <50000000>;
+					reg = <1>;
+				};
+			};
+
+			i2c0: i2c@fffac000 {
+				/* i2c-at91 driver (silicon based) */
+				pinctrl-names = "default";
+				pinctrl-0 = <&pinctrl_i2c0>;
+				/* status = "okay"; */
+			};
+
+			adc0: adc@fffe0000 {
+				/* see bindings/arm/atmel-adc.txt */
+				/* status = "okay"; */
+			};
+
+			watchdog@fffffd40 {
+				status = "okay";
+			};
+
+			rtc {
+				compatible = "atmel,at91sam9260-rtt-rtc";
+				/* RTTC followed by GPBR (backup registers) */
+				reg = <0xfffffd20 0x10>, <0xfffffd50 0x10>;
+				interrupts = <1 4 7>;
+				status = "okay";
+			};
+
+		};
+
+		usb0: ohci@00500000 {
+			num-ports = <2>;
+			status = "okay";
+		};
+	};
+
+	i2c@0 {
+		/* i2c-gpio driver (bit banging) */
+		/* default from at91sam9260.dtsi is PA23 (SDA) + PA24 */
+		/* can override like this: */
+		// gpios = <&pioA 28 0 /* sda */
+			 // &pioA 29 0 /* scl */
+			 // >;
+
+		/* Despite appearances this line: 'i2c-gpio,sda-open-drain;' */
+		/* in at91sam9260.dtsi doesn't set the SDA gpio line in */
+		/* multi-driver (open drain) mode. That can be done like this: */
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_i2c0>;
+		i2c-gpio,delay-us = <5>;        /* ~85 kHz */
+
+		status = "okay";
+
+		// 24c512@50 {
+			// compatible = "24c512";
+			// reg = <0x50>;
+		// };
+
+	};
+
+	leds {
+		compatible = "gpio-leds";
+
+		/* red LED marked "PC7" near mini USB (device) receptacle */
+		user_led {
+			label = "user_led";
+			gpios = <&pioC 7 0>; /* PC7 */
+			linux,default-trigger = "heartbeat";
+		};
+	};
+
+	gpio_keys {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		btn {
+			label = "Button";
+			gpios = <&pioC 4 1>;
+			linux,code = <0x103>;
+			gpio-key,wakeup;
+		};
+
+	};
+
+};
diff --git a/arch/arm/boot/dts/at91sam9g25ek.dts b/arch/arm/boot/dts/at91sam9g25ek.dts
index a1c511f..b3a7f98 100644
--- a/arch/arm/boot/dts/at91sam9g25ek.dts
+++ b/arch/arm/boot/dts/at91sam9g25ek.dts
@@ -22,4 +22,8 @@
 			};
 		};
 	};
+
+	rtc@fffffeb0 {
+		status = "okay";
+	};
 };
diff --git a/arch/arm/boot/dts/at91sam9x5.dtsi b/arch/arm/boot/dts/at91sam9x5.dtsi
index 1145ac3..d1b5199 100644
--- a/arch/arm/boot/dts/at91sam9x5.dtsi
+++ b/arch/arm/boot/dts/at91sam9x5.dtsi
@@ -730,4 +730,11 @@
 		pinctrl-0 = <&pinctrl_i2c_gpio2>;
 		status = "disabled";
 	};
+
+	rtc@fffffeb0 {
+		compatible = "atmel,at91sam9x5-rtc";
+		reg = <0xfffffeb0 0x40>;
+		interrupts = <1 4 7>;
+		status = "disabled";
+	};
 };
diff --git a/arch/arm/mach-at91/at91sam9x5.c b/arch/arm/mach-at91/at91sam9x5.c
index e631fec..837d3c6 100644
--- a/arch/arm/mach-at91/at91sam9x5.c
+++ b/arch/arm/mach-at91/at91sam9x5.c
@@ -227,6 +227,8 @@ static struct clk_lookup periph_clocks_lookups[] = {
 	CLKDEV_CON_DEV_ID("usart", "f8020000.serial", &usart1_clk),
 	CLKDEV_CON_DEV_ID("usart", "f8024000.serial", &usart2_clk),
 	CLKDEV_CON_DEV_ID("usart", "f8028000.serial", &usart3_clk),
+	CLKDEV_CON_DEV_ID("usart", "f8040000.serial", &uart0_clk),
+	CLKDEV_CON_DEV_ID("usart", "f8044000.serial", &uart1_clk),
 	CLKDEV_CON_DEV_ID("t0_clk", "f8008000.timer", &tcb0_clk),
 	CLKDEV_CON_DEV_ID("t0_clk", "f800c000.timer", &tcb0_clk),
 	CLKDEV_CON_DEV_ID("mci_clk", "f0008000.mmc", &mmc0_clk),
@@ -234,6 +236,9 @@ static struct clk_lookup periph_clocks_lookups[] = {
 	CLKDEV_CON_DEV_ID("dma_clk", "ffffec00.dma-controller", &dma0_clk),
 	CLKDEV_CON_DEV_ID("dma_clk", "ffffee00.dma-controller", &dma1_clk),
 	CLKDEV_CON_DEV_ID("pclk", "f0010000.ssc", &ssc_clk),
+	CLKDEV_CON_DEV_ID("spi_clk", "f0000000.spi", &spi0_clk),
+	CLKDEV_CON_DEV_ID("spi_clk", "f0004000.spi", &spi1_clk),
+	CLKDEV_CON_DEV_ID("adc_clk", "f804c000.adc", &adc_clk),
 	CLKDEV_CON_DEV_ID(NULL, "f8010000.i2c", &twi0_clk),
 	CLKDEV_CON_DEV_ID(NULL, "f8014000.i2c", &twi1_clk),
 	CLKDEV_CON_DEV_ID(NULL, "f8018000.i2c", &twi2_clk),
diff --git a/drivers/mmc/host/atmel-mci.c b/drivers/mmc/host/atmel-mci.c
index a77e50d..ef2b86e 100644
--- a/drivers/mmc/host/atmel-mci.c
+++ b/drivers/mmc/host/atmel-mci.c
@@ -2356,6 +2356,7 @@ static int __init atmci_probe(struct platform_device *pdev)
 			dev_err(&pdev->dev, "platform data not available\n");
 			return PTR_ERR(pdata);
 		}
+		pdev->dev.platform_data = pdata;
 	}
 
 	irq = platform_get_irq(pdev, 0);
diff --git a/drivers/mmc/host/of_mmc_spi.c b/drivers/mmc/host/of_mmc_spi.c
index d720b5e..c06abb2 100644
--- a/drivers/mmc/host/of_mmc_spi.c
+++ b/drivers/mmc/host/of_mmc_spi.c
@@ -64,6 +64,11 @@ static int of_mmc_spi_get_cd(struct device *dev)
 	return of_mmc_spi_read_gpio(dev, CD_GPIO);
 }
 
+static int of_mmc_spi_get_cd_inv(struct device *dev)
+{
+	return ! of_mmc_spi_read_gpio(dev, CD_GPIO);
+}
+
 static int of_mmc_spi_get_ro(struct device *dev)
 {
 	return of_mmc_spi_read_gpio(dev, WP_GPIO);
@@ -140,17 +145,26 @@ struct mmc_spi_platform_data *mmc_spi_get_pdata(struct spi_device *spi)
 			oms->alow_gpios[i] = true;
 	}
 
-	if (gpio_is_valid(oms->gpios[CD_GPIO]))
-		oms->pdata.get_cd = of_mmc_spi_get_cd;
+	if (gpio_is_valid(oms->gpios[CD_GPIO])) {
+		if (of_get_property(np, "cd-inverted", NULL))
+			oms->pdata.get_cd = of_mmc_spi_get_cd_inv;
+		else
+			oms->pdata.get_cd = of_mmc_spi_get_cd;
+	}
 	if (gpio_is_valid(oms->gpios[WP_GPIO]))
 		oms->pdata.get_ro = of_mmc_spi_get_ro;
 
-	oms->detect_irq = irq_of_parse_and_map(np, 0);
-	if (oms->detect_irq != 0) {
-		oms->pdata.init = of_mmc_spi_init;
-		oms->pdata.exit = of_mmc_spi_exit;
-	} else {
+	if (of_get_property(np, "np-removable", NULL))
+		oms->pdata.caps |= MMC_CAP_NONREMOVABLE;
+	else if (of_get_property(np, "broken-cd", NULL))
 		oms->pdata.caps |= MMC_CAP_NEEDS_POLL;
+	else {
+		oms->detect_irq = irq_of_parse_and_map(np, 0);
+		if (oms->detect_irq != 0) {
+			oms->pdata.init = of_mmc_spi_init;
+			oms->pdata.exit = of_mmc_spi_exit;
+		} else
+			oms->pdata.caps |= MMC_CAP_NEEDS_POLL;
 	}
 
 	dev->platform_data = &oms->pdata;
diff --git a/drivers/rtc/rtc-at91sam9.c b/drivers/rtc/rtc-at91sam9.c
index b60a34c..1d21ea0 100644
--- a/drivers/rtc/rtc-at91sam9.c
+++ b/drivers/rtc/rtc-at91sam9.c
@@ -21,6 +21,8 @@
 #include <linux/slab.h>
 #include <linux/platform_data/atmel.h>
 #include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
 
 #include <mach/at91_rtt.h>
 #include <mach/cpu.h>
@@ -72,6 +74,18 @@ struct sam9_rtc {
 #define gpbr_writel(rtc, val) \
 	__raw_writel((val), (rtc)->gpbr)
 
+#ifdef CONFIG_OF
+static const struct of_device_id at91sam9_rtc_dt_ids[] = {
+	{ .compatible = "atmel,at91sam9260-rtt-rtc" },
+	/* string above preferred, the following may be taken in the
+	 * future for a more general purpose rtt driver */
+	{ .compatible = "atmel,at91sam9260-rtt" },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, at91sam9_rtc_dt_ids);
+#endif  /* CONFIG_OF */
+
+
 /*
  * Read current time and date in RTC
  */
@@ -456,6 +470,7 @@ static struct platform_driver at91_rtc_driver = {
 	.driver		= {
 		.name	= "rtc-at91sam9",
 		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(at91sam9_rtc_dt_ids),
 		.pm	= &at91_rtc_pm_ops,
 	},
 };
diff --git a/drivers/tty/serial/atmel_serial.c b/drivers/tty/serial/atmel_serial.c
index 3467462..1897008 100644
--- a/drivers/tty/serial/atmel_serial.c
+++ b/drivers/tty/serial/atmel_serial.c
@@ -1458,7 +1458,7 @@ static void atmel_of_init_port(struct atmel_uart_port *atmel_port,
 /*
  * Configure the port from the platform device resource info.
  */
-static void atmel_init_port(struct atmel_uart_port *atmel_port,
+static int atmel_init_port(struct atmel_uart_port *atmel_port,
 				      struct platform_device *pdev)
 {
 	struct uart_port *port = &atmel_port->uart;
@@ -1496,6 +1496,8 @@ static void atmel_init_port(struct atmel_uart_port *atmel_port,
 	/* for console, the clock could already be configured */
 	if (!atmel_port->clk) {
 		atmel_port->clk = clk_get(&pdev->dev, "usart");
+		if (IS_ERR(atmel_port->clk))
+			return 1;	/* peripheral clock not found */
 		clk_enable(atmel_port->clk);
 		port->uartclk = clk_get_rate(atmel_port->clk);
 		clk_disable(atmel_port->clk);
@@ -1511,6 +1513,7 @@ static void atmel_init_port(struct atmel_uart_port *atmel_port,
 	} else {
 		atmel_port->tx_done_mask = ATMEL_US_TXRDY;
 	}
+	return 0;
 }
 
 struct platform_device *atmel_default_console_device;	/* the serial console device */
@@ -1649,13 +1652,18 @@ static int __init atmel_console_init(void)
 		struct atmel_uart_data *pdata =
 			atmel_default_console_device->dev.platform_data;
 		int id = pdata->num;
+		int ret;
 		struct atmel_uart_port *port = &atmel_ports[id];
 
 		port->backup_imr = 0;
 		port->uart.line = id;
 
 		add_preferred_console(ATMEL_DEVICENAME, id, NULL);
-		atmel_init_port(port, atmel_default_console_device);
+		ret = atmel_init_port(port, atmel_default_console_device);
+		if (ret) {
+			pr_err("No peripheral clock for Atmel console ??\n");
+			return -EINVAL;
+		}
 		register_console(&atmel_console);
 	}
 
@@ -1786,7 +1794,12 @@ static int atmel_serial_probe(struct platform_device *pdev)
 	port->backup_imr = 0;
 	port->uart.line = ret;
 
-	atmel_init_port(port, pdev);
+	ret = atmel_init_port(port, pdev);
+	if (ret) {
+		ret = -EINVAL;
+		pr_err("peripheral clock not found for serial port\n");
+		goto err;
+	}
 
 	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
 	if (IS_ERR(pinctrl)) {
-- 
1.7.10.4

